syntax = "proto3";

package mark2;

// ===== ENUM =====

// 結果コード
enum ResultCode {
    NG = 0;
    OK = 1;
}

// ユーザステータス
enum UserStatus {
    Login = 0;     // ログイン
    WaitMatch = 1; // マッチング待ち
    Matched = 2;   // マッチング済み
}

// ルームステータス
enum RoomStatus {
    OPEN = 0;   // オープン
    CLOSED = 1; // クローズド
}

// ===== Model =====

// アクセストークン
message AccessToken {
    string token = 1;
}

// ユーザ情報
message UserInfo {
    uint32 group_id = 1;
    uint32 id = 2;
    UserStatus status = 3;
}

// ルーム情報
message RoomInfo {
    uint32 group_id = 1;
    uint32 id = 2;
    uint32 capacity = 3;
    RoomStatus status = 4;
    repeated uint32 user_id_list = 5;
}

// メッセージ
message Message {
    uint32 id = 1;
    uint32 user_id = 2;
    string content = 3;
}

// ===== Request =====

// ログインリクエスト
message LoginRequest {
    uint32 group_id = 1;
}

// ユーザ情報リクエスト
message UserInfoRequest {
    AccessToken token = 1;
    repeated uint32 user_id_list = 2;
}

// ルーム情報リクエスト
message RoomInfoRequest {
    AccessToken token = 1;
    repeated uint32 room_id_list = 2;
}

// マッチリクエスト
message MatchRequest {
    AccessToken token = 1;
    string key = 2;
}

// メッセージリクエスト
message MessageRequest {
    AccessToken token = 1;
    string content = 2;
}

// ===== Response =====

// 結果一般
message Result {
    ResultCode code = 1;
    string message = 2;
}

// ログイン結果
message LoginResult {
    Result result = 1;
    AccessToken access_token = 2;
}

// ユーザ情報結果
message UserInfoResult {
    Result result = 1;
    repeated UserInfo user_info_list = 2;
}

// ルーム情報結果
message RoomInfoResult {
    Result result = 1;
    repeated RoomInfo room_info_list = 2;
}

service MessageService {
    rpc Login (LoginRequest) returns (LoginResult); // ログイン
    rpc Logout (AccessToken) returns (Result);      // ログアウト

    rpc GetUserInfo (UserInfoRequest) returns (UserInfoResult); // ユーザ情報取得
    rpc GetRoomInfo (RoomInfoRequest) returns (RoomInfoResult); // ルーム情報取得

    rpc MatchRandom (MatchRequest) returns (RoomInfoResult); // ランダムマッチング

    rpc SendMessage (stream MessageRequest) returns (stream Result); // メッセージ送信
    rpc WaitMessage (AccessToken) returns (stream Message);          // メッセージ受信待ち
}
