// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mark2.proto

/*
Package mark2 is a generated protocol buffer package.

It is generated from these files:
	mark2.proto

It has these top-level messages:
	AccessToken
	UserInfo
	RoomInfo
	Message
	LoginRequest
	UserInfoRequest
	RoomInfoRequest
	MatchRequest
	MessageRequest
	Result
	LoginResult
	UserInfoResult
	RoomInfoResult
*/
package mark2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 結果コード
type ResultCodes int32

const (
	ResultCodes_NG ResultCodes = 0
	ResultCodes_OK ResultCodes = 1
)

var ResultCodes_name = map[int32]string{
	0: "NG",
	1: "OK",
}
var ResultCodes_value = map[string]int32{
	"NG": 0,
	"OK": 1,
}

func (x ResultCodes) String() string {
	return proto.EnumName(ResultCodes_name, int32(x))
}
func (ResultCodes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ユーザステータス
type UserStatus int32

const (
	UserStatus_Login     UserStatus = 0
	UserStatus_WaitMatch UserStatus = 1
	UserStatus_Matched   UserStatus = 2
)

var UserStatus_name = map[int32]string{
	0: "Login",
	1: "WaitMatch",
	2: "Matched",
}
var UserStatus_value = map[string]int32{
	"Login":     0,
	"WaitMatch": 1,
	"Matched":   2,
}

func (x UserStatus) String() string {
	return proto.EnumName(UserStatus_name, int32(x))
}
func (UserStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// ルームステータス
type RoomStatus int32

const (
	RoomStatus_OPEN   RoomStatus = 0
	RoomStatus_CLOSED RoomStatus = 1
)

var RoomStatus_name = map[int32]string{
	0: "OPEN",
	1: "CLOSED",
}
var RoomStatus_value = map[string]int32{
	"OPEN":   0,
	"CLOSED": 1,
}

func (x RoomStatus) String() string {
	return proto.EnumName(RoomStatus_name, int32(x))
}
func (RoomStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// アクセストークン
type AccessToken struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AccessToken) Reset()                    { *m = AccessToken{} }
func (m *AccessToken) String() string            { return proto.CompactTextString(m) }
func (*AccessToken) ProtoMessage()               {}
func (*AccessToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccessToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// ユーザ情報
type UserInfo struct {
	GroupId uint32     `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Id      uint32     `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Status  UserStatus `protobuf:"varint,3,opt,name=status,enum=mark2.UserStatus" json:"status,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserInfo) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UserInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserInfo) GetStatus() UserStatus {
	if m != nil {
		return m.Status
	}
	return UserStatus_Login
}

// ルーム情報
type RoomInfo struct {
	GroupId    uint32     `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Id         uint32     `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Capacity   uint32     `protobuf:"varint,3,opt,name=capacity" json:"capacity,omitempty"`
	Status     RoomStatus `protobuf:"varint,4,opt,name=status,enum=mark2.RoomStatus" json:"status,omitempty"`
	UserIdList []uint32   `protobuf:"varint,5,rep,packed,name=user_id_list,json=userIdList" json:"user_id_list,omitempty"`
}

func (m *RoomInfo) Reset()                    { *m = RoomInfo{} }
func (m *RoomInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomInfo) ProtoMessage()               {}
func (*RoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RoomInfo) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *RoomInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoomInfo) GetCapacity() uint32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *RoomInfo) GetStatus() RoomStatus {
	if m != nil {
		return m.Status
	}
	return RoomStatus_OPEN
}

func (m *RoomInfo) GetUserIdList() []uint32 {
	if m != nil {
		return m.UserIdList
	}
	return nil
}

// メッセージ
type Message struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId  uint32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Message) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Message) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Message) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// ログインリクエスト
type LoginRequest struct {
	GroupId uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoginRequest) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

// ユーザ情報リクエスト
type UserInfoRequest struct {
	Token      *AccessToken `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	UserIdList []uint32     `protobuf:"varint,2,rep,packed,name=user_id_list,json=userIdList" json:"user_id_list,omitempty"`
}

func (m *UserInfoRequest) Reset()                    { *m = UserInfoRequest{} }
func (m *UserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*UserInfoRequest) ProtoMessage()               {}
func (*UserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserInfoRequest) GetToken() *AccessToken {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *UserInfoRequest) GetUserIdList() []uint32 {
	if m != nil {
		return m.UserIdList
	}
	return nil
}

// ルーム情報リクエスト
type RoomInfoRequest struct {
	Token      *AccessToken `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	RoomIdList []uint32     `protobuf:"varint,2,rep,packed,name=room_id_list,json=roomIdList" json:"room_id_list,omitempty"`
}

func (m *RoomInfoRequest) Reset()                    { *m = RoomInfoRequest{} }
func (m *RoomInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*RoomInfoRequest) ProtoMessage()               {}
func (*RoomInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RoomInfoRequest) GetToken() *AccessToken {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *RoomInfoRequest) GetRoomIdList() []uint32 {
	if m != nil {
		return m.RoomIdList
	}
	return nil
}

// マッチリクエスト
type MatchRequest struct {
	Token *AccessToken `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Key   string       `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *MatchRequest) Reset()                    { *m = MatchRequest{} }
func (m *MatchRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchRequest) ProtoMessage()               {}
func (*MatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MatchRequest) GetToken() *AccessToken {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *MatchRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// メッセージリクエスト
type MessageRequest struct {
	Token   *AccessToken `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Content string       `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *MessageRequest) Reset()                    { *m = MessageRequest{} }
func (m *MessageRequest) String() string            { return proto.CompactTextString(m) }
func (*MessageRequest) ProtoMessage()               {}
func (*MessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MessageRequest) GetToken() *AccessToken {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *MessageRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// 結果一般
type Result struct {
	Code    ResultCodes `protobuf:"varint,1,opt,name=code,enum=mark2.ResultCodes" json:"code,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Result) GetCode() ResultCodes {
	if m != nil {
		return m.Code
	}
	return ResultCodes_NG
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// ログイン結果
type LoginResult struct {
	Result      *Result      `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	AccessToken *AccessToken `protobuf:"bytes,2,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (m *LoginResult) Reset()                    { *m = LoginResult{} }
func (m *LoginResult) String() string            { return proto.CompactTextString(m) }
func (*LoginResult) ProtoMessage()               {}
func (*LoginResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *LoginResult) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *LoginResult) GetAccessToken() *AccessToken {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

// ユーザ情報結果
type UserInfoResult struct {
	Result       *Result     `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	UserInfoList []*UserInfo `protobuf:"bytes,2,rep,name=user_info_list,json=userInfoList" json:"user_info_list,omitempty"`
}

func (m *UserInfoResult) Reset()                    { *m = UserInfoResult{} }
func (m *UserInfoResult) String() string            { return proto.CompactTextString(m) }
func (*UserInfoResult) ProtoMessage()               {}
func (*UserInfoResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UserInfoResult) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *UserInfoResult) GetUserInfoList() []*UserInfo {
	if m != nil {
		return m.UserInfoList
	}
	return nil
}

// ルーム情報結果
type RoomInfoResult struct {
	Result       *Result     `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	RoomInfoList []*RoomInfo `protobuf:"bytes,2,rep,name=room_info_list,json=roomInfoList" json:"room_info_list,omitempty"`
}

func (m *RoomInfoResult) Reset()                    { *m = RoomInfoResult{} }
func (m *RoomInfoResult) String() string            { return proto.CompactTextString(m) }
func (*RoomInfoResult) ProtoMessage()               {}
func (*RoomInfoResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RoomInfoResult) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *RoomInfoResult) GetRoomInfoList() []*RoomInfo {
	if m != nil {
		return m.RoomInfoList
	}
	return nil
}

func init() {
	proto.RegisterType((*AccessToken)(nil), "mark2.AccessToken")
	proto.RegisterType((*UserInfo)(nil), "mark2.UserInfo")
	proto.RegisterType((*RoomInfo)(nil), "mark2.RoomInfo")
	proto.RegisterType((*Message)(nil), "mark2.Message")
	proto.RegisterType((*LoginRequest)(nil), "mark2.LoginRequest")
	proto.RegisterType((*UserInfoRequest)(nil), "mark2.UserInfoRequest")
	proto.RegisterType((*RoomInfoRequest)(nil), "mark2.RoomInfoRequest")
	proto.RegisterType((*MatchRequest)(nil), "mark2.MatchRequest")
	proto.RegisterType((*MessageRequest)(nil), "mark2.MessageRequest")
	proto.RegisterType((*Result)(nil), "mark2.Result")
	proto.RegisterType((*LoginResult)(nil), "mark2.LoginResult")
	proto.RegisterType((*UserInfoResult)(nil), "mark2.UserInfoResult")
	proto.RegisterType((*RoomInfoResult)(nil), "mark2.RoomInfoResult")
	proto.RegisterEnum("mark2.ResultCodes", ResultCodes_name, ResultCodes_value)
	proto.RegisterEnum("mark2.UserStatus", UserStatus_name, UserStatus_value)
	proto.RegisterEnum("mark2.RoomStatus", RoomStatus_name, RoomStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessageService service

type MessageServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResult, error)
	Logout(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*Result, error)
	GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResult, error)
	GetRoomInfo(ctx context.Context, in *RoomInfoRequest, opts ...grpc.CallOption) (*RoomInfoResult, error)
	MatchRandom(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*RoomInfoResult, error)
	SendStream(ctx context.Context, opts ...grpc.CallOption) (MessageService_SendStreamClient, error)
	WaitMessage(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (MessageService_WaitMessageClient, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResult, error) {
	out := new(LoginResult)
	err := grpc.Invoke(ctx, "/mark2.MessageService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Logout(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/mark2.MessageService/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResult, error) {
	out := new(UserInfoResult)
	err := grpc.Invoke(ctx, "/mark2.MessageService/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetRoomInfo(ctx context.Context, in *RoomInfoRequest, opts ...grpc.CallOption) (*RoomInfoResult, error) {
	out := new(RoomInfoResult)
	err := grpc.Invoke(ctx, "/mark2.MessageService/GetRoomInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) MatchRandom(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*RoomInfoResult, error) {
	out := new(RoomInfoResult)
	err := grpc.Invoke(ctx, "/mark2.MessageService/MatchRandom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendStream(ctx context.Context, opts ...grpc.CallOption) (MessageService_SendStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessageService_serviceDesc.Streams[0], c.cc, "/mark2.MessageService/SendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSendStreamClient{stream}
	return x, nil
}

type MessageService_SendStreamClient interface {
	Send(*MessageRequest) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type messageServiceSendStreamClient struct {
	grpc.ClientStream
}

func (x *messageServiceSendStreamClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceSendStreamClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) WaitMessage(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (MessageService_WaitMessageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessageService_serviceDesc.Streams[1], c.cc, "/mark2.MessageService/WaitMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceWaitMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_WaitMessageClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageServiceWaitMessageClient struct {
	grpc.ClientStream
}

func (x *messageServiceWaitMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MessageService service

type MessageServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResult, error)
	Logout(context.Context, *AccessToken) (*Result, error)
	GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoResult, error)
	GetRoomInfo(context.Context, *RoomInfoRequest) (*RoomInfoResult, error)
	MatchRandom(context.Context, *MatchRequest) (*RoomInfoResult, error)
	SendStream(MessageService_SendStreamServer) error
	WaitMessage(*AccessToken, MessageService_WaitMessageServer) error
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mark2.MessageService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mark2.MessageService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Logout(ctx, req.(*AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mark2.MessageService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mark2.MessageService/GetRoomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetRoomInfo(ctx, req.(*RoomInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_MatchRandom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).MatchRandom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mark2.MessageService/MatchRandom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).MatchRandom(ctx, req.(*MatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).SendStream(&messageServiceSendStreamServer{stream})
}

type MessageService_SendStreamServer interface {
	Send(*Result) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type messageServiceSendStreamServer struct {
	grpc.ServerStream
}

func (x *messageServiceSendStreamServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceSendStreamServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageService_WaitMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccessToken)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).WaitMessage(m, &messageServiceWaitMessageServer{stream})
}

type MessageService_WaitMessageServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messageServiceWaitMessageServer struct {
	grpc.ServerStream
}

func (x *messageServiceWaitMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mark2.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _MessageService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _MessageService_Logout_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _MessageService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetRoomInfo",
			Handler:    _MessageService_GetRoomInfo_Handler,
		},
		{
			MethodName: "MatchRandom",
			Handler:    _MessageService_MatchRandom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStream",
			Handler:       _MessageService_SendStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WaitMessage",
			Handler:       _MessageService_WaitMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mark2.proto",
}

func init() { proto.RegisterFile("mark2.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 660 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x6f, 0x6f, 0xd3, 0x3e,
	0x10, 0x5e, 0xd2, 0x35, 0x6d, 0x2f, 0x6d, 0x96, 0x9f, 0x7f, 0x30, 0xca, 0x24, 0xa4, 0x2a, 0x08,
	0xd4, 0x15, 0x69, 0xaa, 0x5a, 0x81, 0x84, 0xc4, 0x1b, 0x34, 0xa6, 0xa9, 0xa3, 0x5b, 0x91, 0x3b,
	0xc4, 0xab, 0xa9, 0x84, 0xc4, 0x2b, 0x51, 0x97, 0xb8, 0xc4, 0x0e, 0xd2, 0x3e, 0x07, 0xef, 0xf9,
	0xac, 0x28, 0x8e, 0xf3, 0xb7, 0x2b, 0x52, 0x79, 0x15, 0x9f, 0xed, 0x7b, 0x9e, 0xbb, 0x7b, 0xee,
	0x1c, 0xd0, 0x7d, 0x3b, 0x5c, 0x8d, 0x4e, 0xd6, 0x21, 0xe5, 0x14, 0xd5, 0x85, 0x61, 0x3d, 0x07,
	0xfd, 0xbd, 0xe3, 0x10, 0xc6, 0xae, 0xe9, 0x8a, 0x04, 0xe8, 0x11, 0xd4, 0x79, 0xbc, 0xe8, 0x2a,
	0x3d, 0xa5, 0xdf, 0xc2, 0x89, 0x61, 0x7d, 0x85, 0xe6, 0x67, 0x46, 0xc2, 0x49, 0x70, 0x4b, 0xd1,
	0x53, 0x68, 0x2e, 0x43, 0x1a, 0xad, 0x17, 0x9e, 0x2b, 0x2e, 0x75, 0x70, 0x43, 0xd8, 0x13, 0x17,
	0x19, 0xa0, 0x7a, 0x6e, 0x57, 0x15, 0x9b, 0xaa, 0xe7, 0xa2, 0x63, 0xd0, 0x18, 0xb7, 0x79, 0xc4,
	0xba, 0xb5, 0x9e, 0xd2, 0x37, 0x46, 0xff, 0x9d, 0x24, 0x01, 0xc4, 0x58, 0x73, 0x71, 0x80, 0xe5,
	0x05, 0xeb, 0xb7, 0x02, 0x4d, 0x4c, 0xa9, 0xbf, 0x2b, 0xc5, 0x11, 0x34, 0x1d, 0x7b, 0x6d, 0x3b,
	0x1e, 0xbf, 0x17, 0x24, 0x1d, 0x9c, 0xd9, 0x05, 0xfa, 0xfd, 0x12, 0x7d, 0xcc, 0x53, 0xa6, 0x47,
	0x3d, 0x68, 0x47, 0x8c, 0x84, 0x0b, 0xcf, 0x5d, 0xdc, 0x79, 0x8c, 0x77, 0xeb, 0xbd, 0x5a, 0xbf,
	0x83, 0x21, 0xde, 0x9b, 0xb8, 0x53, 0x8f, 0x71, 0x6b, 0x0a, 0x8d, 0x4b, 0xc2, 0x98, 0xbd, 0x24,
	0x32, 0x06, 0x25, 0x8b, 0xe1, 0x09, 0x34, 0xa4, 0xb3, 0x0c, 0x4c, 0x4b, 0xfc, 0x50, 0x17, 0x1a,
	0x0e, 0x0d, 0x38, 0x09, 0xb8, 0x88, 0xad, 0x85, 0x53, 0xd3, 0x3a, 0x86, 0xf6, 0x94, 0x2e, 0xbd,
	0x00, 0x93, 0x1f, 0x11, 0x61, 0xfc, 0x2f, 0x19, 0x5b, 0x37, 0x70, 0x90, 0xd6, 0x3e, 0xbd, 0xdd,
	0x2f, 0x8a, 0xa4, 0x8f, 0x90, 0xcc, 0xab, 0xa0, 0xa3, 0x14, 0x6e, 0x23, 0x2f, 0x75, 0x23, 0xaf,
	0x1b, 0x38, 0x48, 0xeb, 0xfe, 0x4f, 0xf0, 0x21, 0xa5, 0x7e, 0x15, 0x3e, 0xde, 0x93, 0xf0, 0x17,
	0xd0, 0xbe, 0xb4, 0xb9, 0xf3, 0x7d, 0x77, 0x6c, 0x13, 0x6a, 0x2b, 0x72, 0x2f, 0x2a, 0xda, 0xc2,
	0xf1, 0xd2, 0xba, 0x06, 0x43, 0x4a, 0xb0, 0x3b, 0x5a, 0x41, 0x0a, 0xb5, 0x2c, 0xc5, 0x05, 0x68,
	0x98, 0xb0, 0xe8, 0x8e, 0xa3, 0x97, 0xb0, 0xef, 0x50, 0x97, 0x08, 0x30, 0x23, 0x03, 0x4b, 0x0e,
	0x4f, 0xa9, 0x4b, 0x18, 0x16, 0xe7, 0x31, 0x96, 0x9f, 0xc4, 0x91, 0x62, 0x49, 0xd3, 0x5a, 0x81,
	0x2e, 0x65, 0x15, 0x80, 0x2f, 0x40, 0x0b, 0xc5, 0x4a, 0xc6, 0xd7, 0x29, 0x41, 0x62, 0x79, 0x88,
	0x5e, 0x43, 0xdb, 0x16, 0x11, 0x2f, 0x92, 0x64, 0xd4, 0xad, 0xc9, 0xe8, 0x76, 0x6e, 0x58, 0x01,
	0x18, 0x79, 0x63, 0xec, 0xc6, 0x67, 0x24, 0x4d, 0x11, 0xdc, 0xd2, 0x5c, 0x37, 0x7d, 0x74, 0x50,
	0x18, 0x4f, 0x81, 0x2a, 0x7a, 0x27, 0x5e, 0x09, 0x29, 0x03, 0x30, 0xf2, 0x4e, 0xd9, 0x91, 0x2f,
	0xe9, 0x92, 0x2d, 0x7c, 0x19, 0xaa, 0x68, 0xa6, 0x94, 0x6f, 0xf0, 0x0c, 0xf4, 0x42, 0xed, 0x91,
	0x06, 0xea, 0xd5, 0xb9, 0xb9, 0x17, 0x7f, 0x67, 0x1f, 0x4d, 0x65, 0x30, 0x06, 0xc8, 0xdf, 0x11,
	0xd4, 0x82, 0xba, 0xa8, 0xbc, 0xb9, 0x87, 0x3a, 0xd0, 0xfa, 0x62, 0x7b, 0x5c, 0xb4, 0x9d, 0xa9,
	0x20, 0x1d, 0x1a, 0x62, 0x49, 0x5c, 0x53, 0x1d, 0x58, 0x00, 0xf9, 0xf4, 0xa3, 0x26, 0xec, 0xcf,
	0x3e, 0x9d, 0x5d, 0x99, 0x7b, 0x08, 0x40, 0x3b, 0x9d, 0xce, 0xe6, 0x67, 0x1f, 0x4c, 0x65, 0xf4,
	0xab, 0x96, 0xf5, 0xd9, 0x9c, 0x84, 0x3f, 0x3d, 0x87, 0xa0, 0xa1, 0x44, 0x47, 0xff, 0xcb, 0x90,
	0x8b, 0xc3, 0x7b, 0x84, 0xca, 0x9b, 0x22, 0xe7, 0x57, 0xa0, 0x4d, 0xe9, 0x92, 0x46, 0x1c, 0x3d,
	0xa0, 0xe3, 0x51, 0xb9, 0x50, 0xe8, 0x1d, 0xe8, 0xe7, 0x84, 0x67, 0x2f, 0xec, 0x61, 0x55, 0x07,
	0xc9, 0xf3, 0x78, 0x63, 0xbf, 0xe0, 0x9d, 0x3d, 0x9e, 0x87, 0xd5, 0xaa, 0x56, 0xbc, 0x2b, 0x1a,
	0xbe, 0x05, 0x3d, 0x19, 0x50, 0x3b, 0x70, 0xa9, 0x9f, 0x25, 0x58, 0x1c, 0xda, 0x6d, 0xae, 0x6f,
	0x00, 0xe6, 0x24, 0x70, 0xe7, 0x3c, 0x24, 0xb6, 0x8f, 0xd2, 0x4b, 0xe5, 0x11, 0xad, 0xa4, 0xda,
	0x57, 0x86, 0x0a, 0x1a, 0x83, 0x2e, 0x04, 0x92, 0xcf, 0xe9, 0x43, 0x05, 0x32, 0xca, 0x60, 0x43,
	0xe5, 0x9b, 0x26, 0xfe, 0x5a, 0xe3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xcb, 0x37, 0x92,
	0xc4, 0x06, 0x00, 0x00,
}
